@using BlazorWASMAttackTable.Client.AsyncLoading;
@using BlazorWASMAttackTable.Client.Interactions
@using BlazorWASMAttackTable.Client.Interactions.Common
@using BlazorWASMAttackTable.Client.Elements
@using BlazorWASMAttackTable.Client.Elements.SubscriptionDisposal
@using BlazorWASMAttackTable.Client.Saving;
@using BlazorWASMAttackTable.Shared.Protos
@using System.Diagnostics.CodeAnalysis;
@using Newtonsoft.Json;
@using System.Text;

@inject TargetShipdDataSupplierService.TargetShipdDataSupplierServiceClient TargetShipdDataSupplierServiceClient;
@inject IJSRuntime JS

@inherits SubscriptionDisposingElement

@page "/"

@if (Interaction != null)
{
    <div class="flexrow" style="height: 100vh; width: 100vw">
        <div style="
                position: sticky;
                top: 0;
                left: 0;
                width: 120px;
                min-width: 120px;
                max-width: 120px;
                height: 100vh;">
            <InteractionsSidebar
                ParentControl="this"/>
        </div>

        <div style="width: calc(100% - 120px);">
            @if (AttackTableIsSelected.Value == true)
            {
                <div class="flexcolumn" style="width: 100%; height: 100%">
                    <div style="
                            display: flex;
                            flex-direction: row-reverse;
                            flex: 0 0 100px;
                            height: 100px;
                            align-items: center;
                            background: rgb(240, 240, 240)">

                        <img src="images/OpenIconic/data-transfer-download-blue.svg"
                             title="Save session to file"
                             class="upper-tab-button"
                             style="object-fit: contain;"
                             @onclick="SaveSessionStateToFile" />
                        
                        <div class="upper-tab-button" style="position: relative">
                            <img src="images/OpenIconic/data-transfer-upload-blue.svg"
                                style="position: absolute; x: 0; y: 0; width: 100%; height: 100%; object-fit: contain"/>

                            <InputFile style="position: absolute; x: 0; y: 0; width: 100%; height: 100%; opacity: 0" OnChange="OnUploadFileChanged"/>
                        </div>
                    </div>

                    <AttackTable Interaction="Interaction.AttackTable"/>
                </div>
            }
            else
            {
                if (SelectedIdentifyShipInteraction.Value != null)
                {
                    <div class="flexcolumn" style="width: 100%; height: 100%;">

                        <div style="
                            display: flex;
                            flex-direction: row-reverse;
                            flex: 0 0 100px;
                            height: 100px;
                            align-items: center;
                            background: rgb(240, 240, 240)">

                            <img src="images/Cross.svg"
                                title="Close this Identification Tab"
                                class="upper-tab-button"
                                style="object-fit: contain;"
                                @onclick="CloseCurrentIdentificationTabClick"/>

                            <img src="images/CheckMark.svg"
                                title="Add Selected Ship to Attack Table"
                                 class="upper-tab-button"
                                style="object-fit: contain;"
                                @onclick="AcceptCurrentSelectedShip" />
                        </div>

                    
                        <div style="margin: 5px;
                            height: 0;
                            flex: 1 0;">
                            <ShipIndentification Interaction="SelectedIdentifyShipInteraction.Value" />
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <h1>Loading data, please wait</h1>
}

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>


@code
{
    #region Consts
    private const string SAVE_SESSION_FILE_NAME = "BlazorAttackTable";
    #endregion

    #region Fields
    private UserSessionInteraction? _interaction;
    #endregion

    #region Properties

    public UserSessionInteraction? Interaction
    {
        get
        {
            return _interaction;
        }
        private set
        {
            if (_interaction != value)
            {
                _interaction = value;

                if (_interaction != null)
                {
                    Subscribe(_interaction!.IdentifyShipInteractions.ListChanged, OnIdentifyShipInteractionsListChanged);
                }

                StateHasChanged();
            }
        }
    }

    public ValueInteraction<IdentifyShipInteraction?> SelectedIdentifyShipInteraction
    {
        get;
        private init;
    } = new(null);

    public ValueInteraction<bool> AttackTableIsSelected
    {
        get;
        private init;
    } = new(true);

    private static string CurrentSessionSaveName =>
        SAVE_SESSION_FILE_NAME + ' ' + DateTime.Now.ToString("g") + ".json";
    #endregion

    #region Methods
    protected override void OnParametersSet()
    {
        InitiateUserSessionInteractionCreation();

        Subscribe(SelectedIdentifyShipInteraction.ValueChanged, OnSelectedIdentifyShipInteractionChanged);
        Subscribe(AttackTableIsSelected.ValueChanged, OnAttackTableIsSelectedChanged);
    }

    private async void InitiateUserSessionInteractionCreation()
    {
        AsyncLoadedData.TargetShipDatas.SetValue(
            (await TargetShipdDataSupplierServiceClient.ProvideDatasAsync(new()))
            .Datas.Select(buffer => buffer.ToData()).ToList());

        Interaction = new UserSessionInteraction(await AsyncLoadedData.TargetShipDatas.ItemTask);
    }

    private void OnSelectedIdentifyShipInteractionChanged(IdentifyShipInteraction? _)
    {
        if (AttackTableIsSelected.Value == false)
            StateHasChanged();
    }

    private void OnAttackTableIsSelectedChanged(bool _)
    {
        StateHasChanged();
    }

    private void OnIdentifyShipInteractionsListChanged()
    {
        if (SelectedIdentifyShipInteraction.Value != null && !Interaction!.IdentifyShipInteractions.Contains(SelectedIdentifyShipInteraction.Value))
        {
            SelectedIdentifyShipInteraction.Value = null;
            AttackTableIsSelected.Value = true;
        }
    }

    private void CloseCurrentIdentificationTabClick()
    {
        if (SelectedIdentifyShipInteraction.Value != null)
            Interaction!.DropIdentifyShipInteraction(SelectedIdentifyShipInteraction.Value);
    }

    private void AcceptCurrentSelectedShip()
    {
        SelectedIdentifyShipInteraction.Value?.AcceptDataFromSelectedWrap();
    }

    private async Task SaveSessionStateToFile()
    {
        Save save = SessionSaveLib.SessionToSave(Interaction!);
        string saveString = JsonConvert.SerializeObject(save, Formatting.Indented);

        MemoryStream downloadStream = new MemoryStream(Encoding.UTF8.GetBytes(saveString));

        using DotNetStreamReference streamRef = new(downloadStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", CurrentSessionSaveName, streamRef);
    }

    private async Task OnUploadFileChanged(InputFileChangeEventArgs args)
    {
        string text;

        using Stream readStream = args.File.OpenReadStream(maxAllowedSize: long.MaxValue);
        {
            StreamReader reader = new(readStream);
            text = await reader.ReadToEndAsync();
        }

        await TryLoadSessionStateText(text);
    }

    private async Task TryLoadSessionStateText(string text)
    {
        Save? save;
        try
        {
            save = JsonConvert.DeserializeObject<Save>(text);
        }
        catch
        {
            // Silent handling so far, will wait until I implement a proper way to notify user of errors.
            return;
        }

        if (save == null) return;

        try
        {
            Interaction = await SessionSaveLib.CreateSessionFromSave(save);
        }
        catch
        {
            // Silent handling so far, will wait until I implement a proper way to notify user of errors.
            return;
        }
    }
    #endregion
}