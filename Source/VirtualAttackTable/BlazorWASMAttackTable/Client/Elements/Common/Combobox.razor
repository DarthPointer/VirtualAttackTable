@using BlazorWASMAttackTable.Client.Interactions.Options;
@using BlazorWASMAttackTable.Client.Elements.SubscriptionDisposal;

@inherits SubscriptionDisposingElement

<div @onclick="OnMainBoxClick" @onclick:stopPropagation="true" class="combobox-main-box" style="z-index: @ZIndex">
    <div class="combobox-main-box-text">
    @if (Interaction.SelectedOption.Value == null)
    {
        @NoOption
    }
    else
    {
        @Interaction.SelectedOption.Value.OptionName
    }
    </div>

    @if (DisplayDropdown)
    {
        <div class="combobox-dropdown-box" @onclick:stopPropagation="true">
            @if (Interaction.AllowNoOption)
            {
                <div class="combobox-dropdown-entry" @onclick="OnNoOptionClick">@NoOption</div>
            }

            @foreach (IOptionInteraction option in Interaction.Options)
            {
                <div class="combobox-dropdown-entry" @onclick="() => OnOptionClick(option)"
                    @onmouseenter="() => OnMouseEnterOption(option)"
                    @onmouseleave="() => OnMouseLeaveOption(option)"
                >
                    @option.OptionName
                </div>
            }

            @foreach (FakeOptionInteraction fakeOption in Interaction.FakeOptionInteractions)
            {
                <div class="combobox-dropdown-entry" @onclick="() => OnFakeOptionClick(fakeOption)">
                    @fakeOption.OptionName
                </div>
            }
        </div>
    }
</div>

@code {
    #region Consts
    private const string NoOption = "--No Option--";
    #endregion

    #region Fields
    private bool _displayDropdown;
    #endregion

    #region Properties
    [Parameter, EditorRequired]
    public IListForSingleOption Interaction { get; set; } = null!;

    private bool DisplayDropdown
    {
        get
        {
            return _displayDropdown;
        }
        set
        {
            if (_displayDropdown != value)
            {
                _displayDropdown = value;

                if (!_displayDropdown)
                {
                    ClearPreviewedOption();
                }

                StateHasChanged();
            }
        }
    }

    private IOptionInteraction? PreviewedOption { get; set; }

    private int ZIndex => DisplayDropdown ? 100 : 0;
    #endregion

    #region Methods
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Subscribe(Interaction.SelectedOption.ValueChanged, OnSelectedOptionChanged);
    }

    private void OnSelectedOptionChanged(IOption? option)
    {
        StateHasChanged();
    }

    private void OnMainBoxClick()
    {
        DisplayDropdown = !DisplayDropdown;
    }

    private void OnNoOptionClick()
    {
        DisplayDropdown = false;
        Interaction.SelectNoOption();
    }

    private void OnOptionClick(IOptionInteraction option)
    {
        DisplayDropdown = false;

        if (!option.IsSelected)
        {
            option.Toggle();
        }
    }

    private void OnFakeOptionClick(FakeOptionInteraction fakeOptionInteraction)
    {
        DisplayDropdown = false;

        fakeOptionInteraction.TriggerAction();
    }

    private void OnMouseEnterOption(IOptionInteraction option)
    {
        PreviewOption(option);
    }

    private void OnMouseLeaveOption(IOptionInteraction option)
    {
        if (option == PreviewedOption)
            ClearPreviewedOption();
    }

    private void PreviewOption(IOptionInteraction option)
    {
        PreviewedOption = option;
        option.Preview(true);
    }

    private void ClearPreviewedOption()
    {
        PreviewedOption?.Preview(false);
        PreviewedOption = null;
    }
    #endregion
}
